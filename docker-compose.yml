services:
  metabase:
    image: metabase/metabase-enterprise:v1.52.5
    container_name: metabase
    hostname: metabase
    ports:
      - 3000:3000
    environment:
      MB_EMBEDDING_APP_ORIGIN: "*"
      MB_ENABLE_EMBEDDING: true
      MB_EMBEDDING_SECRET_KEY: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      MB_SITE_URL: http://localhost:3000/
      MB_PREMIUM_EMBEDDING_TOKEN: <your_token>
      MB_LOAD_ANALYTICS_CONTENT: false
      MB_LOAD_SAMPLE_CONTENT: false
      MB_JWT_ENABLED: true
      MB_JWT_IDENTITY_PROVIDER_URI: http://backend:8080/api/auth
      MB_JWT_SHARED_SECRET: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3000M
        reservations:
          cpus: '2'
          memory: 1500M
    networks: 
      - metanet
    healthcheck:
      test: curl --fail -X GET -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 10
    depends_on:
      postgres-data1:
        condition: service_healthy
  setup:
    build: setup/.
    container_name: setup
    volumes:
      - $PWD/setup/setup.py:/app/setup.py
    networks:
      - metanet
    depends_on:
      metabase:
        condition: service_healthy
    command: python /app/setup.py
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 64M
        reservations:
          cpus: '0.5'
          memory: 32M
    environment:
      host: http://metabase
      port: 3000
      connection_string: "postgres://metabase:metasample123@postgres-data1:5432/sample"
      table: Orders
  postgres-data1:
    image:  metabase/qa-databases:postgres-sample-12
    container_name: postgres-data1
    hostname: postgres-data1
    networks: 
      - metanet
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M
        reservations:
          cpus: '1'
          memory: 1024M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase -d sample"]
      interval: 5s
      timeout: 5s
      retries: 3
    command: -c log_statement=all
  backend:
    build: backend/.
    container_name: backend
    networks: 
      - metanet
    ports:
      - 9090:9090
    hostname: backend
    volumes:
      - $PWD/backend:/app
    environment:
      METABASE_URL: http://localhost:3000
      JWT_SIGNING_KEY_STATIC_EMBEDDING: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      JWT_SIGNING_KEY_INTERACTIVE_EMBEDDING: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    healthcheck:
      test: bun -e 'fetch(`http://localhost:9090/api/health`).then(x=>x.status==200?process.exit(0):process.exit(1)).catch(()=>process.exit(1))'
      interval: 15s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 128M
        reservations:
          cpus: '1'
          memory: 128M
  frontend:
    build: frontend/.
    container_name: frontend
    networks: 
      - metanet
    ports:
      - 8080:8080
    volumes:
      - $PWD/frontend/src:/app/src
      - $PWD/frontend/public:/app/public
    hostname: frontend
    environment:
      VITE_METABASE_INSTANCE_URL: http://localhost:3000
      VITE_AUTH_PROVIDER_URI: http://localhost:9090/api/sdk
    depends_on:
      backend:
        condition: service_healthy
      metabase:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024MB
        reservations:
          cpus: '1'
          memory: 1024MB

networks: 
  metanet:
    driver: bridge